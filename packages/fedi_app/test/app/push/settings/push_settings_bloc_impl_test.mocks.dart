// Mocks generated by Mockito 5.4.4 from annotations
// in fedi_app/test/app/push/settings/push_settings_bloc_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:connectivity_plus/connectivity_plus.dart' as _i16;
import 'package:easy_dispose/easy_dispose.dart' as _i17;
import 'package:fedi_app/async/loading/init/async_init_loading_model.dart'
    as _i14;
import 'package:fedi_app/connection/connection_service.dart' as _i15;
import 'package:fedi_app/push/fcm/fcm_push_service.dart' as _i12;
import 'package:fedi_app/push/push_model.dart' as _i13;
import 'package:fedi_app/push/relay/push_relay_service.dart' as _i10;
import 'package:fediverse_api/fediverse_api.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:unifedi_api/src/api/feature/unifedi_api_feature_model.dart'
    as _i2;
import 'package:unifedi_api/src/api/push/subscription/alerts/unifedi_api_push_subscription_alerts_model.dart'
    as _i9;
import 'package:unifedi_api/src/api/push/subscription/metadata/unifedi_api_push_subscription_metadata_model.dart'
    as _i8;
import 'package:unifedi_api/src/api/push/subscription/service/unifedi_api_push_subscription_service.dart'
    as _i6;
import 'package:unifedi_api/src/api/push/subscription/unifedi_api_push_subscription_model.dart'
    as _i4;
import 'package:unifedi_api/src/api/rest/unifedi_api_rest_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIUnifediApiFeature_0 extends _i1.SmartFake
    implements _i2.IUnifediApiFeature {
  _FakeIUnifediApiFeature_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIUnifediApiRestService_1 extends _i1.SmartFake
    implements _i3.IUnifediApiRestService {
  _FakeIUnifediApiRestService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIUnifediApiPushSubscription_2 extends _i1.SmartFake
    implements _i4.IUnifediApiPushSubscription {
  _FakeIUnifediApiPushSubscription_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFediverseApiFeatureRequirementState_3 extends _i1.SmartFake
    implements _i5.FediverseApiFeatureRequirementState {
  _FakeFediverseApiFeatureRequirementState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IUnifediApiPushSubscriptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUnifediApiPushSubscriptionService extends _i1.Mock
    implements _i6.IUnifediApiPushSubscriptionService {
  MockIUnifediApiPushSubscriptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IUnifediApiFeature get subscribeFeature => (super.noSuchMethod(
        Invocation.getter(#subscribeFeature),
        returnValue: _FakeIUnifediApiFeature_0(
          this,
          Invocation.getter(#subscribeFeature),
        ),
      ) as _i2.IUnifediApiFeature);

  @override
  _i2.IUnifediApiFeature get subscribeChatMentionFeature => (super.noSuchMethod(
        Invocation.getter(#subscribeChatMentionFeature),
        returnValue: _FakeIUnifediApiFeature_0(
          this,
          Invocation.getter(#subscribeChatMentionFeature),
        ),
      ) as _i2.IUnifediApiFeature);

  @override
  _i2.IUnifediApiFeature get subscribeEmojiReactionFeature =>
      (super.noSuchMethod(
        Invocation.getter(#subscribeEmojiReactionFeature),
        returnValue: _FakeIUnifediApiFeature_0(
          this,
          Invocation.getter(#subscribeEmojiReactionFeature),
        ),
      ) as _i2.IUnifediApiFeature);

  @override
  _i2.IUnifediApiFeature get getCurrentSubscriptionFeature =>
      (super.noSuchMethod(
        Invocation.getter(#getCurrentSubscriptionFeature),
        returnValue: _FakeIUnifediApiFeature_0(
          this,
          Invocation.getter(#getCurrentSubscriptionFeature),
        ),
      ) as _i2.IUnifediApiFeature);

  @override
  _i2.IUnifediApiFeature get unsubscribeFeature => (super.noSuchMethod(
        Invocation.getter(#unsubscribeFeature),
        returnValue: _FakeIUnifediApiFeature_0(
          this,
          Invocation.getter(#unsubscribeFeature),
        ),
      ) as _i2.IUnifediApiFeature);

  @override
  _i3.IUnifediApiRestService get restService => (super.noSuchMethod(
        Invocation.getter(#restService),
        returnValue: _FakeIUnifediApiRestService_1(
          this,
          Invocation.getter(#restService),
        ),
      ) as _i3.IUnifediApiRestService);

  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<_i4.IUnifediApiPushSubscription> subscribe({
    required _i8.IUnifediApiPushSubscriptionMetadata? metadata,
    required _i9.IUnifediApiPushSubscriptionAlerts? alerts,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [],
          {
            #metadata: metadata,
            #alerts: alerts,
          },
        ),
        returnValue: _i7.Future<_i4.IUnifediApiPushSubscription>.value(
            _FakeIUnifediApiPushSubscription_2(
          this,
          Invocation.method(
            #subscribe,
            [],
            {
              #metadata: metadata,
              #alerts: alerts,
            },
          ),
        )),
      ) as _i7.Future<_i4.IUnifediApiPushSubscription>);

  @override
  _i7.Future<_i4.IUnifediApiPushSubscription> getCurrentSubscription() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentSubscription,
          [],
        ),
        returnValue: _i7.Future<_i4.IUnifediApiPushSubscription>.value(
            _FakeIUnifediApiPushSubscription_2(
          this,
          Invocation.method(
            #getCurrentSubscription,
            [],
          ),
        )),
      ) as _i7.Future<_i4.IUnifediApiPushSubscription>);

  @override
  _i7.Future<void> unsubscribe() => (super.noSuchMethod(
        Invocation.method(
          #unsubscribe,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i5.FediverseApiFeatureRequirementState checkFeatureState(
          _i2.IUnifediApiFeature? feature) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkFeatureState,
          [feature],
        ),
        returnValue: _FakeFediverseApiFeatureRequirementState_3(
          this,
          Invocation.method(
            #checkFeatureState,
            [feature],
          ),
        ),
      ) as _i5.FediverseApiFeatureRequirementState);

  @override
  _i7.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [IPushRelayService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPushRelayService extends _i1.Mock implements _i10.IPushRelayService {
  MockIPushRelayService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get pushRelayBaseUrl => (super.noSuchMethod(
        Invocation.getter(#pushRelayBaseUrl),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#pushRelayBaseUrl),
        ),
      ) as String);

  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);

  @override
  String createPushRelayEndPointUrl({
    required String? account,
    required Uri? baseServerUrl,
    required String? fcmDeviceToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPushRelayEndPointUrl,
          [],
          {
            #account: account,
            #baseServerUrl: baseServerUrl,
            #fcmDeviceToken: fcmDeviceToken,
          },
        ),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.method(
            #createPushRelayEndPointUrl,
            [],
            {
              #account: account,
              #baseServerUrl: baseServerUrl,
              #fcmDeviceToken: fcmDeviceToken,
            },
          ),
        ),
      ) as String);

  @override
  _i7.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [IFcmPushService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFcmPushService extends _i1.Mock implements _i12.IFcmPushService {
  MockIFcmPushService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<String> get deviceTokenStream => (super.noSuchMethod(
        Invocation.getter(#deviceTokenStream),
        returnValue: _i7.Stream<String>.empty(),
      ) as _i7.Stream<String>);

  @override
  _i7.Stream<_i13.PushMessage> get messageStream => (super.noSuchMethod(
        Invocation.getter(#messageStream),
        returnValue: _i7.Stream<_i13.PushMessage>.empty(),
      ) as _i7.Stream<_i13.PushMessage>);

  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);

  @override
  _i7.Stream<_i14.AsyncInitLoadingState> get initLoadingStateStream =>
      (super.noSuchMethod(
        Invocation.getter(#initLoadingStateStream),
        returnValue: _i7.Stream<_i14.AsyncInitLoadingState>.empty(),
      ) as _i7.Stream<_i14.AsyncInitLoadingState>);

  @override
  _i7.Stream<bool> get isLoadingStream => (super.noSuchMethod(
        Invocation.getter(#isLoadingStream),
        returnValue: _i7.Stream<bool>.empty(),
      ) as _i7.Stream<bool>);

  @override
  _i7.Future<bool> askPermissions() => (super.noSuchMethod(
        Invocation.method(
          #askPermissions,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  void clearInitialMessage() => super.noSuchMethod(
        Invocation.method(
          #clearInitialMessage,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> performAsyncInit() => (super.noSuchMethod(
        Invocation.method(
          #performAsyncInit,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [IConnectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIConnectionService extends _i1.Mock
    implements _i15.IConnectionService {
  MockIConnectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i16.ConnectivityResult> get connectionStateStream =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStateStream),
        returnValue: _i7.Stream<_i16.ConnectivityResult>.empty(),
      ) as _i7.Stream<_i16.ConnectivityResult>);

  @override
  _i16.ConnectivityResult get connectionState => (super.noSuchMethod(
        Invocation.getter(#connectionState),
        returnValue: _i16.ConnectivityResult.bluetooth,
      ) as _i16.ConnectivityResult);

  @override
  _i7.Stream<bool> get isConnectedStream => (super.noSuchMethod(
        Invocation.getter(#isConnectedStream),
        returnValue: _i7.Stream<bool>.empty(),
      ) as _i7.Stream<bool>);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);

  @override
  _i17.DisposeOrder get disposeOrder => (super.noSuchMethod(
        Invocation.getter(#disposeOrder),
        returnValue: _i17.DisposeOrder.lifo,
      ) as _i17.DisposeOrder);

  @override
  bool get catchExceptions => (super.noSuchMethod(
        Invocation.getter(#catchExceptions),
        returnValue: false,
      ) as bool);

  @override
  List<_i17.IDisposable> get disposables => (super.noSuchMethod(
        Invocation.getter(#disposables),
        returnValue: <_i17.IDisposable>[],
      ) as List<_i17.IDisposable>);

  @override
  bool get isDisposed => (super.noSuchMethod(
        Invocation.getter(#isDisposed),
        returnValue: false,
      ) as bool);

  @override
  set isDisposed(bool? _isDisposed) => super.noSuchMethod(
        Invocation.setter(
          #isDisposed,
          _isDisposed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> internalAsyncInit() => (super.noSuchMethod(
        Invocation.method(
          #internalAsyncInit,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void addDisposable(_i17.IDisposable? disposable) => super.noSuchMethod(
        Invocation.method(
          #addDisposable,
          [disposable],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addDisposables(Iterable<_i17.IDisposable>? disposables) =>
      super.noSuchMethod(
        Invocation.method(
          #addDisposables,
          [disposables],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> performDispose() => (super.noSuchMethod(
        Invocation.method(
          #performDispose,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
